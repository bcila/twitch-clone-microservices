// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/stream.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "stream";

export interface StartStreamRequest {
  userId: string;
  title: string;
  description: string;
}

export interface StartStreamResponse {
  streamId: string;
  /** RTMP URL */
  rtmpUrl: string;
}

export interface StopStreamRequest {
  streamId: string;
}

export interface StopStreamResponse {
  success: boolean;
}

export interface SaveStreamToS3Request {
  streamId: string;
}

export interface SaveStreamToS3Response {
  /** HLS file URL (m3u8) */
  s3Url: string;
}

export const STREAM_PACKAGE_NAME = "stream";

export interface StreamServiceClient {
  startStream(request: StartStreamRequest): Observable<StartStreamResponse>;

  stopStream(request: StopStreamRequest): Observable<StopStreamResponse>;

  saveStreamToS3(request: SaveStreamToS3Request): Observable<SaveStreamToS3Response>;
}

export interface StreamServiceController {
  startStream(
    request: StartStreamRequest,
  ): Promise<StartStreamResponse> | Observable<StartStreamResponse> | StartStreamResponse;

  stopStream(
    request: StopStreamRequest,
  ): Promise<StopStreamResponse> | Observable<StopStreamResponse> | StopStreamResponse;

  saveStreamToS3(
    request: SaveStreamToS3Request,
  ): Promise<SaveStreamToS3Response> | Observable<SaveStreamToS3Response> | SaveStreamToS3Response;
}

export function StreamServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["startStream", "stopStream", "saveStreamToS3"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("StreamService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("StreamService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const STREAM_SERVICE_NAME = "StreamService";
