// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface CreateUserRequest {
  username: string;
  password: string;
  email: string;
}

export interface FindUserByIdRequest {
  userId: string;
}

export interface FindUserByEmailRequest {
  email: string;
}

export interface FindUserByUsernameRequest {
  username: string;
}

export interface UserRespose {
  userId: string;
  username: string;
  email: string;
  password: string;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  createUser(request: CreateUserRequest): Observable<UserRespose>;

  findUserById(request: FindUserByIdRequest): Observable<UserRespose>;

  findUserByEmail(request: FindUserByEmailRequest): Observable<UserRespose>;

  findUserByUsername(request: FindUserByUsernameRequest): Observable<UserRespose>;
}

export interface UserServiceController {
  createUser(request: CreateUserRequest): Promise<UserRespose> | Observable<UserRespose> | UserRespose;

  findUserById(request: FindUserByIdRequest): Promise<UserRespose> | Observable<UserRespose> | UserRespose;

  findUserByEmail(request: FindUserByEmailRequest): Promise<UserRespose> | Observable<UserRespose> | UserRespose;

  findUserByUsername(request: FindUserByUsernameRequest): Promise<UserRespose> | Observable<UserRespose> | UserRespose;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "findUserById", "findUserByEmail", "findUserByUsername"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
