// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: stream.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StartStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartStreamRequest) Reset() {
	*x = StartStreamRequest{}
	mi := &file_stream_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartStreamRequest) ProtoMessage() {}

func (x *StartStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartStreamRequest.ProtoReflect.Descriptor instead.
func (*StartStreamRequest) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{0}
}

func (x *StartStreamRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StartStreamRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StartStreamRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type StartStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	RtmpUrl       string                 `protobuf:"bytes,2,opt,name=rtmp_url,json=rtmpUrl,proto3" json:"rtmp_url,omitempty"` // RTMP URL
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartStreamResponse) Reset() {
	*x = StartStreamResponse{}
	mi := &file_stream_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartStreamResponse) ProtoMessage() {}

func (x *StartStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartStreamResponse.ProtoReflect.Descriptor instead.
func (*StartStreamResponse) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{1}
}

func (x *StartStreamResponse) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *StartStreamResponse) GetRtmpUrl() string {
	if x != nil {
		return x.RtmpUrl
	}
	return ""
}

type StopStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopStreamRequest) Reset() {
	*x = StopStreamRequest{}
	mi := &file_stream_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopStreamRequest) ProtoMessage() {}

func (x *StopStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopStreamRequest.ProtoReflect.Descriptor instead.
func (*StopStreamRequest) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{2}
}

func (x *StopStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type StopStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopStreamResponse) Reset() {
	*x = StopStreamResponse{}
	mi := &file_stream_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopStreamResponse) ProtoMessage() {}

func (x *StopStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopStreamResponse.ProtoReflect.Descriptor instead.
func (*StopStreamResponse) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{3}
}

func (x *StopStreamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SaveStreamToS3Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveStreamToS3Request) Reset() {
	*x = SaveStreamToS3Request{}
	mi := &file_stream_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveStreamToS3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveStreamToS3Request) ProtoMessage() {}

func (x *SaveStreamToS3Request) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveStreamToS3Request.ProtoReflect.Descriptor instead.
func (*SaveStreamToS3Request) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{4}
}

func (x *SaveStreamToS3Request) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type SaveStreamToS3Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	S3Url         string                 `protobuf:"bytes,1,opt,name=s3_url,json=s3Url,proto3" json:"s3_url,omitempty"` // HLS file URL (m3u8)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveStreamToS3Response) Reset() {
	*x = SaveStreamToS3Response{}
	mi := &file_stream_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveStreamToS3Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveStreamToS3Response) ProtoMessage() {}

func (x *SaveStreamToS3Response) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveStreamToS3Response.ProtoReflect.Descriptor instead.
func (*SaveStreamToS3Response) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{5}
}

func (x *SaveStreamToS3Response) GetS3Url() string {
	if x != nil {
		return x.S3Url
	}
	return ""
}

var File_stream_proto protoreflect.FileDescriptor

const file_stream_proto_rawDesc = "" +
	"\n" +
	"\fstream.proto\x12\x06stream\"e\n" +
	"\x12StartStreamRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\"M\n" +
	"\x13StartStreamResponse\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12\x19\n" +
	"\brtmp_url\x18\x02 \x01(\tR\artmpUrl\"0\n" +
	"\x11StopStreamRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\".\n" +
	"\x12StopStreamResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"4\n" +
	"\x15SaveStreamToS3Request\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\"/\n" +
	"\x16SaveStreamToS3Response\x12\x15\n" +
	"\x06s3_url\x18\x01 \x01(\tR\x05s3Url2\xed\x01\n" +
	"\rStreamService\x12F\n" +
	"\vStartStream\x12\x1a.stream.StartStreamRequest\x1a\x1b.stream.StartStreamResponse\x12C\n" +
	"\n" +
	"StopStream\x12\x19.stream.StopStreamRequest\x1a\x1a.stream.StopStreamResponse\x12O\n" +
	"\x0eSaveStreamToS3\x12\x1d.stream.SaveStreamToS3Request\x1a\x1e.stream.SaveStreamToS3ResponseB\tZ\a./protob\x06proto3"

var (
	file_stream_proto_rawDescOnce sync.Once
	file_stream_proto_rawDescData []byte
)

func file_stream_proto_rawDescGZIP() []byte {
	file_stream_proto_rawDescOnce.Do(func() {
		file_stream_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_stream_proto_rawDesc), len(file_stream_proto_rawDesc)))
	})
	return file_stream_proto_rawDescData
}

var file_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_stream_proto_goTypes = []any{
	(*StartStreamRequest)(nil),     // 0: stream.StartStreamRequest
	(*StartStreamResponse)(nil),    // 1: stream.StartStreamResponse
	(*StopStreamRequest)(nil),      // 2: stream.StopStreamRequest
	(*StopStreamResponse)(nil),     // 3: stream.StopStreamResponse
	(*SaveStreamToS3Request)(nil),  // 4: stream.SaveStreamToS3Request
	(*SaveStreamToS3Response)(nil), // 5: stream.SaveStreamToS3Response
}
var file_stream_proto_depIdxs = []int32{
	0, // 0: stream.StreamService.StartStream:input_type -> stream.StartStreamRequest
	2, // 1: stream.StreamService.StopStream:input_type -> stream.StopStreamRequest
	4, // 2: stream.StreamService.SaveStreamToS3:input_type -> stream.SaveStreamToS3Request
	1, // 3: stream.StreamService.StartStream:output_type -> stream.StartStreamResponse
	3, // 4: stream.StreamService.StopStream:output_type -> stream.StopStreamResponse
	5, // 5: stream.StreamService.SaveStreamToS3:output_type -> stream.SaveStreamToS3Response
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_stream_proto_init() }
func file_stream_proto_init() {
	if File_stream_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_stream_proto_rawDesc), len(file_stream_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stream_proto_goTypes,
		DependencyIndexes: file_stream_proto_depIdxs,
		MessageInfos:      file_stream_proto_msgTypes,
	}.Build()
	File_stream_proto = out.File
	file_stream_proto_goTypes = nil
	file_stream_proto_depIdxs = nil
}
